import sympy as sp
from sympy import *

y1, y2, y1_, y2_, alpha, beta, x1, x2 = sp.symbols("y1 y2 y1_ y2_ alpha beta x1 x2")
w, phi = sp.symbols("w phi")


def go():
    ans = sp.solve([
        sp.Eq(y1 / y2, sp.sin(alpha) / sp.sin(beta)),
        sp.Eq(y1_ / y2_, sp.cos(alpha) / sp.cos(beta)),
    ], alpha, beta)
    print(ans)


ans = [(pi - asin(y1 * y2 * sqrt((-2 * y1 ** 2 * y2_ ** 2 + y2 ** 2 * (y1_ ** 2 + y2_ ** 2) + 2 * y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4)) / (y2 ** 2 * (y1_ ** 2 - y2_ ** 2))) * (y1_ ** 2 - y2_ ** 2) / (-y1 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 2 + y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4))),
        2 * atan(sqrt((-2 * y1 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 2 + y2 ** 2 * y2_ ** 2 + 2 * y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4)) / (y2 ** 2 * (y1_ ** 2 - y2_ ** 2))))), (
           asin(y1 * y2 * sqrt((-2 * y1 ** 2 * y2_ ** 2 + y2 ** 2 * (y1_ ** 2 + y2_ ** 2) - 2 * y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4)) / (y2 ** 2 * (y1_ ** 2 - y2_ ** 2))) * (-y1_ ** 2 + y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2 + y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4))) + pi,
           -2 * atan(sqrt(-(2 * y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2 - y2 ** 2 * y2_ ** 2 + 2 * y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4)) / (y2 ** 2 * (y1_ ** 2 - y2_ ** 2))))), (
           asin(y1 * y2 * sqrt((-2 * y1 ** 2 * y2_ ** 2 + y2 ** 2 * (y1_ ** 2 + y2_ ** 2) + 2 * y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4)) / (y2 ** 2 * (y1_ ** 2 - y2_ ** 2))) * (-y1_ ** 2 + y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2 - y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4))) + pi,
           -2 * atan(sqrt((-2 * y1 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 2 + y2 ** 2 * y2_ ** 2 + 2 * y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4)) / (y2 ** 2 * (y1_ ** 2 - y2_ ** 2))))), (
           asin(y1 * y2 * sqrt(-(2 * y1 ** 2 * y2_ ** 2 - y2 ** 2 * (y1_ ** 2 + y2_ ** 2) + 2 * y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4)) / (y2 ** 2 * (y1_ ** 2 - y2_ ** 2))) * (y1_ ** 2 - y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2 + y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4))) + pi,
           2 * atan(sqrt((-2 * y1 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 2 + y2 ** 2 * y2_ ** 2 - 2 * y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4)) / (y2 ** 2 * (y1_ ** 2 - y2_ ** 2))))), (
           asin(y1 * y2 * sqrt((-2 * y1 ** 2 * y2_ ** 2 / y2 ** 2 + y1_ ** 2 + y2_ ** 2 - 2 * y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4) / y2 ** 2) / (y1_ ** 2 - y2_ ** 2)) * (-y1_ ** 2 + y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2 + y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4))),
           2 * atan(sqrt((-2 * y1 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 2 + y2 ** 2 * y2_ ** 2 - 2 * y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4)) / (y2 ** 2 * (y1_ ** 2 - y2_ ** 2))))), (
           asin(y1 * y2 * sqrt((-2 * y1 ** 2 * y2_ ** 2 / y2 ** 2 + y1_ ** 2 + y2_ ** 2 + 2 * y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4) / y2 ** 2) / (y1_ ** 2 - y2_ ** 2)) * (-y1_ ** 2 + y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2 - y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4))),
           2 * atan(sqrt((-2 * y1 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 2 + y2 ** 2 * y2_ ** 2 + 2 * y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4)) / (y2 ** 2 * (y1_ ** 2 - y2_ ** 2))))), (
           -asin(y1 * y2 * sqrt((-2 * y1 ** 2 * y2_ ** 2 + y2 ** 2 * (y1_ ** 2 + y2_ ** 2) + 2 * y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4)) / (y2 ** 2 * (y1_ ** 2 - y2_ ** 2))) * (y1_ ** 2 - y2_ ** 2) / (-y1 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 2 + y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4))),
           -2 * atan(sqrt((-2 * y1 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 2 + y2 ** 2 * y2_ ** 2 + 2 * y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4)) / (y2 ** 2 * (y1_ ** 2 - y2_ ** 2))))), (
           asin(y1 * y2 * sqrt(-(2 * y1 ** 2 * y2_ ** 2 - y2 ** 2 * (y1_ ** 2 + y2_ ** 2) + 2 * y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4)) / (y2 ** 2 * (y1_ ** 2 - y2_ ** 2))) * (y1_ ** 2 - y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2 + y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4))),
           -2 * atan(sqrt(-(2 * y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2 - y2 ** 2 * y2_ ** 2 + 2 * y2_ * sqrt(y1 ** 4 * y2_ ** 2 - y1 ** 2 * y1_ ** 2 * y2 ** 2 - y1 ** 2 * y2 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 4)) / (y2 ** 2 * (y1_ ** 2 - y2_ ** 2)))))]
"""
(pi - asin(y1*y2*sqrt((-2*y1**2*y2_**2 + y2**2*(y1_**2 + y2_**2) + 2*y2_*sqrt(y1**4*y2_**2 - y1**2*y1_**2*y2**2 - y1**2*y2**2*y2_**2 + y1_**2*y2**4))/(y2**2*(y1_**2 - y2_**2)))*(y1_**2 - y2_**2)/(-y1**2*y2_**2 + y1_**2*y2**2 + y2_*sqrt(y1**4*y2_**2 - y1**2*y1_**2*y2**2 - y1**2*y2**2*y2_**2 + y1_**2*y2**4))), 2*atan(sqrt((-2*y1**2*y2_**2 + y1_**2*y2**2 + y2**2*y2_**2 + 2*y2_*sqrt(y1**4*y2_**2 - y1**2*y1_**2*y2**2 - y1**2*y2**2*y2_**2 + y1_**2*y2**4))/(y2**2*(y1_**2 - y2_**2)))))
"""
for a, b in ans:
    W, Phi = sp.solve([Eq(a, w * x1 + phi), Eq(b, w * x2 + phi)], w, phi)
    A = y1 / sin(W * x1 + Phi)
    print(A, W, Phi)
