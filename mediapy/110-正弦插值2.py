import sympy as sp
from sympy import *

y1, y2, y1_, y2_, alpha, beta, x1, x2, s1, s2, c1, c2, A = sp.symbols("y1 y2 y1_ y2_ alpha beta x1 x2 s1 s2 c1 c2 A")
w, phi = sp.symbols("w phi")


def go():
    ans = sp.solve([
        s1 ** 2 + c1 ** 2 - 1,
        s2 ** 2 + c2 * c2 - 1,
        A * s1 - y1,
        A * s2 - y2,
        A * w * c1 - y1_,
        A * w * c2 - y2_,
    ], A, w, s1, s2, c1, c2)
    print(ans)


"""
最终会产生四组解
"""
ans = [(sqrt((-y1_ ** 2 + y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)) * (-y1 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 2) / (y1_ ** 2 - y2_ ** 2), sqrt((y1 ** 2 - y2 ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)) * sqrt((-y1_ ** 2 + y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)) * (-y1 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 2) / (y1 ** 2 - y2 ** 2), y1 * sqrt((-y1_ ** 2 + y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)),
        y2 * sqrt((-y1_ ** 2 + y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)), -y1_ * sqrt((y1 ** 2 - y2 ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)), -y2_ * sqrt((y1 - y2) * (y1 + y2) / ((y1 * y2_ - y1_ * y2) * (y1 * y2_ + y1_ * y2)))), (
           sqrt((-y1_ ** 2 + y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)) * (-y1 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 2) / (y1_ ** 2 - y2_ ** 2), sqrt((y1 ** 2 - y2 ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)) * sqrt((-y1_ ** 2 + y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)) * (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2) / (y1 ** 2 - y2 ** 2), y1 * sqrt((-y1_ ** 2 + y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)),
           y2 * sqrt((-y1_ ** 2 + y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)), y1_ * sqrt((y1 ** 2 - y2 ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)), y2_ * sqrt((y1 - y2) * (y1 + y2) / ((y1 * y2_ - y1_ * y2) * (y1 * y2_ + y1_ * y2)))), (
           sqrt((-y1_ ** 2 + y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)) * (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2) / (y1_ ** 2 - y2_ ** 2), sqrt((y1 ** 2 - y2 ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)) * sqrt((-y1_ ** 2 + y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)) * (-y1 ** 2 * y2_ ** 2 + y1_ ** 2 * y2 ** 2) / (y1 ** 2 - y2 ** 2), -y1 * sqrt(-(y1_ ** 2 - y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)),
           -y2 * sqrt(-(y1_ ** 2 - y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)), y1_ * sqrt((y1 ** 2 - y2 ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)), y2_ * sqrt((y1 - y2) * (y1 + y2) / ((y1 * y2_ - y1_ * y2) * (y1 * y2_ + y1_ * y2)))), (
           sqrt((-y1_ ** 2 + y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)) * (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2) / (y1_ ** 2 - y2_ ** 2), sqrt((y1 ** 2 - y2 ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)) * sqrt((-y1_ ** 2 + y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)) * (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2) / (y1 ** 2 - y2 ** 2), -y1 * sqrt(-(y1_ ** 2 - y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)),
           -y2 * sqrt(-(y1_ ** 2 - y2_ ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)), -y1_ * sqrt((y1 ** 2 - y2 ** 2) / (y1 ** 2 * y2_ ** 2 - y1_ ** 2 * y2 ** 2)), -y2_ * sqrt((y1 - y2) * (y1 + y2) / ((y1 * y2_ - y1_ * y2) * (y1 * y2_ + y1_ * y2))))]

print(len(ans))

second = solve([atan2(s1, c1) - (w * x1 + phi),
                atan2(s2, c2) - (w * x2 + phi),
                ], w, phi)
print(second)
W, Phi = second[w], second[phi]
final_ans = []
for AA, ww, ss1, ss2, cc1, cc2 in ans:
    ma = {s1: ss1, s2: ss2, c1: cc1, c2: cc2}
    www = W.subs(ma)
    phiphiphi = Phi.subs(ma)
    final_ans.append((AA, www, phiphiphi))
print(final_ans)
print(len(final_ans))
"""
[(sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2))*(-y1**2*y2_**2 + y1_**2*y2**2)/(y1_**2 - y2_**2), (atan2(y1*sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2)), -y1_*sqrt((y1**2 - y2**2)/(y1**2*y2_**2 - y1_**2*y2**2))) - atan2(y2*sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2)), -y2_*sqrt((y1 - y2)*(y1 + y2)/((y1*y2_ - y1_*y2)*(y1*y2_ + y1_*y2)))))/(x1 - x2), (x1*atan2(y2*sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2)), -y2_*sqrt((y1 - y2)*(y1 + y2)/((y1*y2_ - y1_*y2)*(y1*y2_ + y1_*y2)))) - x2*atan2(y1*sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2)), -y1_*sqrt((y1**2 - y2**2)/(y1**2*y2_**2 - y1_**2*y2**2))))/(x1 - x2)), (sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2))*(-y1**2*y2_**2 + y1_**2*y2**2)/(y1_**2 - y2_**2), (atan2(y1*sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2)), y1_*sqrt((y1**2 - y2**2)/(y1**2*y2_**2 - y1_**2*y2**2))) - atan2(y2*sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2)), y2_*sqrt((y1 - y2)*(y1 + y2)/((y1*y2_ - y1_*y2)*(y1*y2_ + y1_*y2)))))/(x1 - x2), (x1*atan2(y2*sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2)), y2_*sqrt((y1 - y2)*(y1 + y2)/((y1*y2_ - y1_*y2)*(y1*y2_ + y1_*y2)))) - x2*atan2(y1*sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2)), y1_*sqrt((y1**2 - y2**2)/(y1**2*y2_**2 - y1_**2*y2**2))))/(x1 - x2)), (sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2))*(y1**2*y2_**2 - y1_**2*y2**2)/(y1_**2 - y2_**2), (atan2(-y1*sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2)), y1_*sqrt((y1**2 - y2**2)/(y1**2*y2_**2 - y1_**2*y2**2))) - atan2(-y2*sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2)), y2_*sqrt((y1 - y2)*(y1 + y2)/((y1*y2_ - y1_*y2)*(y1*y2_ + y1_*y2)))))/(x1 - x2), (x1*atan2(-y2*sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2)), y2_*sqrt((y1 - y2)*(y1 + y2)/((y1*y2_ - y1_*y2)*(y1*y2_ + y1_*y2)))) - x2*atan2(-y1*sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2)), y1_*sqrt((y1**2 - y2**2)/(y1**2*y2_**2 - y1_**2*y2**2))))/(x1 - x2)), (sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2))*(y1**2*y2_**2 - y1_**2*y2**2)/(y1_**2 - y2_**2), (atan2(-y1*sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2)), -y1_*sqrt((y1**2 - y2**2)/(y1**2*y2_**2 - y1_**2*y2**2))) - atan2(-y2*sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2)), -y2_*sqrt((y1 - y2)*(y1 + y2)/((y1*y2_ - y1_*y2)*(y1*y2_ + y1_*y2)))))/(x1 - x2), (x1*atan2(-y2*sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2)), -y2_*sqrt((y1 - y2)*(y1 + y2)/((y1*y2_ - y1_*y2)*(y1*y2_ + y1_*y2)))) - x2*atan2(-y1*sqrt((-y1_**2 + y2_**2)/(y1**2*y2_**2 - y1_**2*y2**2)), -y1_*sqrt((y1**2 - y2**2)/(y1**2*y2_**2 - y1_**2*y2**2))))/(x1 - x2))]
"""
